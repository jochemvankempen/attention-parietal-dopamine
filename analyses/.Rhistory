# set files and directories
# load useful functions ---------------------------------------------------
wddir = funr::get_script_path()
# load useful functions ---------------------------------------------------
wddir = funr::get_script_path()
# load useful functions ---------------------------------------------------
wddir = funr::get_script_path()
# load the relevant libraries
x<-c("tidyverse", "dplyr")
?funr
?funr::get_script_path
funr::get_script_path()
# load useful functions ---------------------------------------------------
wddir = funr::get_script_path()
# load the relevant libraries
x<-c("tidyverse", "dplyr")
lapply(x, function(x) {if (!require(x, character.only=T)) {install.packages(x);require(x)}})
# clear all
rm(list=ls(all=TRUE))
# load useful functions ---------------------------------------------------
wddir = funr::get_script_path()
wddir
# wddir   = str_c('/Users/jochemvankempen/repositories/attention-parietal-dopamine/analyses/external/')
source(str_c(wddir, 'twolines.R'))
# set files and directories
filedir = str_c('/Users/jochemvankempen/NCL/gratc_DA/population/')
filename = 'doseResponse_drugMI_';
filename = 'doseResponse_attAUROC_';
drugname = 'SCH23390'
drugname = 'Dopamine'
selectivity = '_none'
selectivity = '_att&dru'
# selectivity = '_att'
# load data
populationdata = read_csv(str_c(filedir, filename, drugname, selectivity,'.csv'))
populationdata <- as.data.frame(populationdata)
# run twolines
a = twolines(y~x, data = populationdata[complete.cases(populationdata),])
# make output_mat
a <- as.tibble(sapply(a, "[", 1))
output_mat <- a %>%
dplyr::select(one_of("b1"), one_of("p1"), one_of("b2"), one_of("p2"), one_of("u.sig"))
output_mat <- output_mat[1,]
output_mat_colnames <- names(data.frame(output_mat))
output_mat_colnames[which(output_mat_colnames=="u.sig")] <- 'usig'
colnames(output_mat) <- output_mat_colnames
Output_mat <- as_tibble(output_mat)
Output_mat$b1  <- as.character(Output_mat$b1)
Output_mat$b2  <- as.character(Output_mat$b2)
Output_mat$p1  <- as.character(Output_mat$p1)
Output_mat$p2  <- as.character(Output_mat$p2)
Output_mat$usig  <- as.character(Output_mat$usig)
# write
write_csv(Output_mat, str_c(filedir, filename, drugname, selectivity, '_R','.csv'))
wddir = funr::get_script_path('run_twolines.R')
run_twolines
run_twolines.r
run run_twolines.r
run 'run_twolines.r'
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source(fullfile(wddir, 'twolines.R'))
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
# load the relevant libraries
x<-c("tidyverse", "dplyr","filenamer")
lapply(x, function(x) {if (!require(x, character.only=T)) {install.packages(x);require(x)}})
# clear all
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
?i_am
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
# filename('twolines.R',path=get_script_path())
source(filename('twolines.R',wddir))
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
?filename
# load the relevant libraries
x<-c("tidyverse", "dplyr", "filenamer", "here")
lapply(x, function(x) {if (!require(x, character.only=T)) {install.packages(x);require(x)}})
# clear all
rm(list=ls(all=TRUE))
# load useful functions ---------------------------------------------------
# wddir = here::i_am()
wddir = here('repositories/attention-parietal-dopamine/analyses/external')
print(wddir)
print(wddir[1])
print(wddir[1][1])
filename('twolines.R',path=wddir[1])
filename('twolines.R',path=wddir[1])[1]
as.char(filename('twolines.R',path=wddir[1]))
as.character(filename('twolines.R',path=wddir[1]))
as.character(filename('twolines',path=wddir,ext='r'))
as.character(filename('twolines',path=wddir,ext='R'))
source(str_c(wddir,'twolines.R'))
wddir = here('repositories/attention-parietal-dopamine/analyses/external/')
source(str_c(wddir,'twolines.R'))
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
# filename = 'doseResponse_attAUROC_';
drugname = 'SCH23390'
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
here()
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
source('~/repositories/attention-parietal-dopamine/analyses/run_twolines.R', echo=TRUE)
# load the relevant libraries
x<-c("tidyverse", "dplyr", "filenamer", "here", "lme4")
lapply(x, function(x) {if (!require(x, character.only=T)) {install.packages(x);require(x)}})
# load the relevant libraries
x<-c("tidyverse", "dplyr", "filenamer", "here", "lme4")
lapply(x, function(x) {if (!require(x, character.only=T)) {install.packages(x);require(x)}})
dat = read_csv('/Users/jochemvankempen/test.csv')
lme4::lmer?
lme4?
?lme4::lmer
lme4::lmer( 'rate ~ 1 + drug * attention * unit_class + (1 | unit)', data=dat)
lme4::lmer( 'rate ~ 1 + drug_on * attention * unit_class + (1 | unit)', data=dat)
lme4::lmer( 'rate ~ 1 + drug_on * attention * unit_class + (1 | unit)', data=dat, REML= FALSE)
lme.full = lme4::lmer( 'rate ~ 1 + drug_on * attention * unit_class + (1 | unit)', data=dat, REML= FALSE)
lme.full
m = lme4::lmer( 'rate ~ 1 + drug_on * attention * unit_class + (1 | unit)', data=dat, REML= FALSE)
anova(m)
m.coefficients
m['coefficients']
summary(m)
dat
dat.attention
dat['attention']
dat['attention'] = factor(dat['attention'])
dat['attention']
?factor
dat = read_csv('/Users/jochemvankempen/test.csv')
is.factor(dat['attention'])
as.factor(dat['attention'])
as.factor(dat['attention'], ordered = FALSE)
as.factor(dat['attention'], ordered = False)
?category
?factor
x = as.factor(dat['attention'])
x
is.factor(dat['attention'])
dat['attention'] = as.factor(dat['attention'])
is.factor(dat['attention'])
dat['attention'] = factor(dat['attention'])
is.factor(dat['attention'])
dat['attention'] <- factor(dat['attention'])
is.factor(dat['attention'])
dat = read_csv('/Users/jochemvankempen/test.csv')
dat['attention'] <- factor(dat['attention'])
dat
dat$attention
dat = read_csv('/Users/jochemvankempen/test.csv')
dat$attention <- factor(dat$attention)
dat
dat$attention <- factor(dat$attention)
dat$drug_on <- factor(dat$drug_on)
dat$unit_class <- factor(dat$unit_class)
m = lme4::lmer( 'rate ~ 1 + drug_on * attention * unit_class + (1 | unit)', data=dat, REML= FALSE)
anova(m)
summarise(m)
summary(m)
?relevel
dat$attention <- factor(dat$attention)
dat$drug_on <- factor(dat$drug_on)
dat$unit_class <- factor(dat$unit_class)
dat$attention <- relevel(dat$attention, 'Attend RF')
m = lme4::lmer( 'rate ~ 1 + drug_on * attention * unit_class + (1 | unit)', data=dat, REML= FALSE)
# anova(m)
summary(m)
dat$attention <- relevel(dat$attention, 'Attend away')
m = lme4::lmer( 'rate ~ 1 + drug_on * attention * unit_class + (1 | unit)', data=dat, REML= FALSE)
# anova(m)
summary(m)
source('~/.active-rstudio-document', echo=TRUE)
rnorm(5)
integer(3)
inx1*x2
x1*x2
knitr::opts_chunk$set(echo = TRUE)
x1 = rnorm(num_samples, 4, 2)
x1 = rnorm(num_samples, 4, 2)
num_samples = 500
x1 = rnorm(num_samples, 4, 2)
x2 = rnorm(num_samples, 8, 5)
x1*x2
library(tidyverse)
?map_dbl
avg <- mtcars %>%
purrr::map_dbl(mean)
avg
#2
nycflights13::flights %>%
purrr::map2_chr(class)
#2
nycflights13::flights %>%
purrr::map_chr(class)
#2
mtcars %>%
purrr::map_chr(class)
#3
mtcars %>%
purrr::map_int(unique)
?unique
#3
mtcars %>%
purrr::map_int(length(unique))
#3
mtcars %>%
purrr::map_dbl(length(unique))
?map_data
?runif
rnorm()
?rnorm()
rnorm(10, mean=2)
?map_dbl
?map
map_data(means, runif(10))
means <- c(-10,0,10,100)
map_data(means, runif(10))
map(means, runif(10))
0,100)
map(means, runif(1
means <- c(-10,0,10,100)
map(means, runif(10))
map(means, runif, 10
)
means <- c(-10,0,10,100)
map(means, runif, 10)
means %>%
map(runif, 10)
means %>%
sapply(runif, 10)
?runif
means %>%
sapply(rnorm, 10)
map(10, means)
?rnorm
map(10, mean = means)
map(n = 10, mean = means)
map_df(n = 10, mean = means)
?map_df
map_df(means, rnorm, n = 10, mean = means)
map(means, rnorm, n = 10, mean = means)
map(means, rnorm, n = 10)
map_df(means, rnorm, n = 10)
map(means, rnorm, n = 10)
out_means <- map(means, rnorm, n = 10)
out_means[1]
out_means[1][1]
out_means[1][1][1]
out_means[[1]
]
out_means
class(out_means)
out_means[2]
out_means[1]
out_means[[1]]
out_means[[1]][1]
#2
iris %>%
purrr::map_chr(class)
map_lgl(iris, is.factor)
map(1:5, runif)
1:5
map([1:5], runif)
map(list(1:5), runif)
map(-2:2, rnorm, n = 5)
map_dbl(-2:2, rnorm, n = 5)
map(1:5, runif)
map(list(1:5), runif)
map(-2:2, rnorm, n = 5)
map(x, function(df) lm(mpg ~ wt, data = df))
?tribble
models <- mtcars %>%
map(~lm(mpg~wt, data=.))
models <- mtcars %>%
map(~lm(mpg~wt, data=.))
mtcars
models <- mtcars %>%
map(~lm(mpg~wt))
x <- list(1, 10, "a")
x
x[1]
x[[1]]
y <- x %>% map(safely(log))
y
y[[1]]
y$result
transpose(y)
y[[1]]
y$error
y$result
transpose(y) %>% y$result
transpose(y) %>% .$result
y <- x %>% map(possibly(log))
?safely
y <- x %>% map(safely(log), otherwise=NA)
y
y <- x %>% map(possibly(log), otherwise=NA)
y <- x %>% map(possibly(log, otherwise=NA))
y
y <- x %>% map(safely(log, otherwise=NA))
y
head(iris)
class(iris)
map_lgl(iris, is.factor)
iris %>% keep(is.factor)
iris %>% keep(is.factor) %>% head
knitr::opts_chunk$set(echo = TRUE)
x<-c("tidyverse","dplyr","lme4","lmerTest","MASS","pbkrtest","parallel","MuMIn","varhandle")
lapply(x, function(x) {if (!require(x, character.only=T)) {install.packages(x);require(x)}})
# # remove unnecessary variables
# rm.all.but(keep=c("params"), envir=.GlobalEnv, keep_functions=TRUE, gc_limit=100,
#            regex="auto")
x<-c("tidyverse","dplyr","lme4","lmerTest","MASS","pbkrtest","parallel","MuMIn","varhandle")
lapply(x, function(x) {if (!require(x, character.only=T)) {install.packages(x);require(x)}})
# # remove unnecessary variables
# rm.all.but(keep=c("params"), envir=.GlobalEnv, keep_functions=TRUE, gc_limit=100,
#            regex="auto")
# Run markdown in new session with specific input defined in params
xfun::Rscript_call(
rmarkdown::render,
list(input="population_stats.Rmd",
output_format = "github_document",
output_file = paste0('../results/','population_stats','-',drugname,'-',dependent_variable,'.md'),
params = list("drugname"=drugname, "dependent_variable"=dependent_variable),
envir = new.env()
)
)
# Run the population_stats.Rmd, multiple times with different parameters
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/RStudio/bin/pandoc")
setwd('C:/Jochem/repositories/attention-parietal-dopamine/analyses/')
setwd('/Users/jochemvankempen/repositories/attention-parietal-dopamine/analyses/')
# parameter definition
drugnames = c('Dopamine','SCH23390') #
dependent_variables = c('rate','FF','gain_log')
#
# define function to call Rmd script
render_main <- function(drugname,dependent_variable) {
# Run markdown in new session with specific input defined in params
xfun::Rscript_call(
rmarkdown::render,
list(input="population_stats.Rmd",
output_format = "github_document",
output_file = paste0('../results/','population_stats','-',drugname,'-',dependent_variable,'.md'),
params = list("drugname"=drugname, "dependent_variable"=dependent_variable),
envir = new.env()
)
)
}
# define function to call Rmd script
render_unit <- function(drugname,dependent_variable) {
# Run markdown in new session with specific input defined in params
xfun::Rscript_call(
rmarkdown::render,
list(input="population_stats_unit.Rmd",
output_format = "github_document",
output_file = paste0('../results_unit/','population_stats','-',drugname,'-',dependent_variable,'.md'),
params = list("drugname"=drugname, "dependent_variable"=dependent_variable),
envir = new.env()
)
)
}
# loop through drugnames and dependent_variables
for (drugname in drugnames) {
for (dependent_variable in dependent_variables) {
render_main(drugname, dependent_variable)
#render_unit(drugname, dependent_variable)
}
}
# Run the population_stats.Rmd, multiple times with different parameters
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/RStudio/bin/pandoc")
setwd('C:/Jochem/repositories/attention-parietal-dopamine/analyses/')
setwd('/Users/jochemvankempen/repositories/attention-parietal-dopamine/analyses/')
# parameter definition
drugnames = c('Dopamine','SCH23390') #
dependent_variables = c('rate','FF','gain_log')
#
# define function to call Rmd script
render_main <- function(drugname,dependent_variable) {
# Run markdown in new session with specific input defined in params
xfun::Rscript_call(
rmarkdown::render,
list(input="population_stats.Rmd",
output_format = "github_document",
output_file = paste0('../results/','population_stats','-',drugname,'-',dependent_variable,'.md'),
params = list("drugname"=drugname, "dependent_variable"=dependent_variable)
#envir = new.env()
)
)
}
# define function to call Rmd script
render_unit <- function(drugname,dependent_variable) {
# Run markdown in new session with specific input defined in params
xfun::Rscript_call(
rmarkdown::render,
list(input="population_stats_unit.Rmd",
output_format = "github_document",
output_file = paste0('../results_unit/','population_stats','-',drugname,'-',dependent_variable,'.md'),
params = list("drugname"=drugname, "dependent_variable"=dependent_variable),
envir = new.env()
)
)
}
# loop through drugnames and dependent_variables
for (drugname in drugnames) {
for (dependent_variable in dependent_variables) {
render_main(drugname, dependent_variable)
#render_unit(drugname, dependent_variable)
}
}
# Run the population_stats.Rmd, multiple times with different parameters
#Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/RStudio/bin/pandoc")
#setwd('C:/Jochem/repositories/attention-parietal-dopamine/analyses/')
setwd('/Users/jochemvankempen/repositories/attention-parietal-dopamine/analyses/')
# parameter definition
drugnames = c('Dopamine','SCH23390') #
dependent_variables = c('rate','FF','gain_log')
#
# define function to call Rmd script
render_main <- function(drugname,dependent_variable) {
# Run markdown in new session with specific input defined in params
xfun::Rscript_call(
rmarkdown::render,
list(input="population_stats.Rmd",
output_format = "github_document",
output_file = paste0('../results/','population_stats','-',drugname,'-',dependent_variable,'.md'),
params = list("drugname"=drugname, "dependent_variable"=dependent_variable)
#envir = new.env()
)
)
}
# define function to call Rmd script
render_unit <- function(drugname,dependent_variable) {
# Run markdown in new session with specific input defined in params
xfun::Rscript_call(
rmarkdown::render,
list(input="population_stats_unit.Rmd",
output_format = "github_document",
output_file = paste0('../results_unit/','population_stats','-',drugname,'-',dependent_variable,'.md'),
params = list("drugname"=drugname, "dependent_variable"=dependent_variable),
envir = new.env()
)
)
}
# loop through drugnames and dependent_variables
for (drugname in drugnames) {
for (dependent_variable in dependent_variables) {
render_main(drugname, dependent_variable)
#render_unit(drugname, dependent_variable)
}
}
# Run the population_stats.Rmd, multiple times with different parameters
#Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/RStudio/bin/pandoc")
#setwd('C:/Jochem/repositories/attention-parietal-dopamine/analyses/')
setwd('/Users/jochemvankempen/repositories/attention-parietal-dopamine/analyses/')
# parameter definition
drugnames = c('Dopamine','SCH23390') #
dependent_variables = c('rate','FF','gain_log')
#
# define function to call Rmd script
render_main <- function(drugname,dependent_variable) {
# Run markdown in new session with specific input defined in params
xfun::Rscript_call(
rmarkdown::render,
list(input="population_stats.Rmd",
output_format = "github_document",
output_file = paste0('../results/','population_stats','-',drugname,'-',dependent_variable,'.md'),
params = list("drugname"=drugname, "dependent_variable"=dependent_variable)
#envir = new.env()
)
)
}
# define function to call Rmd script
render_unit <- function(drugname,dependent_variable) {
# Run markdown in new session with specific input defined in params
xfun::Rscript_call(
rmarkdown::render,
list(input="population_stats_unit.Rmd",
output_format = "github_document",
output_file = paste0('../results_unit/','population_stats','-',drugname,'-',dependent_variable,'.md'),
params = list("drugname"=drugname, "dependent_variable"=dependent_variable),
envir = new.env()
)
)
}
# loop through drugnames and dependent_variables
for (drugname in drugnames) {
for (dependent_variable in dependent_variables) {
render_main(drugname, dependent_variable)
#render_unit(drugname, dependent_variable)
}
}
